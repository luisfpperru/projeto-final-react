import {
  ButtonBase_default
} from "./chunk-7I5AW62K.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-4CFPVCA2.js";
import {
  _objectWithoutProperties,
  init_objectWithoutProperties,
  init_withStyles,
  withStyles_default
} from "./chunk-N4AKWCMK.js";
import {
  _extends,
  init_extends,
  require_prop_types
} from "./chunk-3D3B3HZN.js";
import {
  require_react
} from "./chunk-RYO6GA3P.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-TUOADDPD.js";
import {
  __toModule
} from "./chunk-A5ICIBVI.js";

// node_modules/@material-ui/core/esm/Fab/Fab.js
init_objectWithoutProperties();
init_extends();
var React = __toModule(require_react());
var import_prop_types = __toModule(require_prop_types());
init_clsx_m();
init_withStyles();
init_capitalize();
var styles = function styles2(theme) {
  return {
    root: _extends({}, theme.typography.button, {
      boxSizing: "border-box",
      minHeight: 36,
      transition: theme.transitions.create(["background-color", "box-shadow", "border"], {
        duration: theme.transitions.duration.short
      }),
      borderRadius: "50%",
      padding: 0,
      minWidth: 0,
      width: 56,
      height: 56,
      boxShadow: theme.shadows[6],
      "&:active": {
        boxShadow: theme.shadows[12]
      },
      color: theme.palette.getContrastText(theme.palette.grey[300]),
      backgroundColor: theme.palette.grey[300],
      "&:hover": {
        backgroundColor: theme.palette.grey.A100,
        "@media (hover: none)": {
          backgroundColor: theme.palette.grey[300]
        },
        "&$disabled": {
          backgroundColor: theme.palette.action.disabledBackground
        },
        textDecoration: "none"
      },
      "&$focusVisible": {
        boxShadow: theme.shadows[6]
      },
      "&$disabled": {
        color: theme.palette.action.disabled,
        boxShadow: theme.shadows[0],
        backgroundColor: theme.palette.action.disabledBackground
      }
    }),
    label: {
      width: "100%",
      display: "inherit",
      alignItems: "inherit",
      justifyContent: "inherit"
    },
    primary: {
      color: theme.palette.primary.contrastText,
      backgroundColor: theme.palette.primary.main,
      "&:hover": {
        backgroundColor: theme.palette.primary.dark,
        "@media (hover: none)": {
          backgroundColor: theme.palette.primary.main
        }
      }
    },
    secondary: {
      color: theme.palette.secondary.contrastText,
      backgroundColor: theme.palette.secondary.main,
      "&:hover": {
        backgroundColor: theme.palette.secondary.dark,
        "@media (hover: none)": {
          backgroundColor: theme.palette.secondary.main
        }
      }
    },
    extended: {
      borderRadius: 48 / 2,
      padding: "0 16px",
      width: "auto",
      minHeight: "auto",
      minWidth: 48,
      height: 48,
      "&$sizeSmall": {
        width: "auto",
        padding: "0 8px",
        borderRadius: 34 / 2,
        minWidth: 34,
        height: 34
      },
      "&$sizeMedium": {
        width: "auto",
        padding: "0 16px",
        borderRadius: 40 / 2,
        minWidth: 40,
        height: 40
      }
    },
    focusVisible: {},
    disabled: {},
    colorInherit: {
      color: "inherit"
    },
    sizeSmall: {
      width: 40,
      height: 40
    },
    sizeMedium: {
      width: 48,
      height: 48
    }
  };
};
var Fab = React.forwardRef(function Fab2(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, focusVisibleClassName = props.focusVisibleClassName, _props$size = props.size, size = _props$size === void 0 ? "large" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "round" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"]);
  return React.createElement(ButtonBase_default, _extends({
    className: clsx_m_default(classes.root, className, variant !== "round" && classes.extended, size !== "large" && classes["size".concat(capitalize(size))], disabled && classes.disabled, {
      "primary": classes.primary,
      "secondary": classes.secondary,
      "inherit": classes.colorInherit
    }[color]),
    component,
    disabled,
    focusRipple: !disableFocusRipple,
    focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
    ref
  }, other), React.createElement("span", {
    className: classes.label
  }, children));
});
true ? Fab.propTypes = {
  children: import_prop_types.default.node.isRequired,
  classes: import_prop_types.default.object,
  className: import_prop_types.default.string,
  color: import_prop_types.default.oneOf(["default", "inherit", "primary", "secondary"]),
  component: import_prop_types.default.elementType,
  disabled: import_prop_types.default.bool,
  disableFocusRipple: import_prop_types.default.bool,
  disableRipple: import_prop_types.default.bool,
  focusVisibleClassName: import_prop_types.default.string,
  href: import_prop_types.default.string,
  size: import_prop_types.default.oneOf(["large", "medium", "small"]),
  variant: import_prop_types.default.oneOf(["extended", "round"])
} : void 0;
var Fab_default = withStyles_default(styles, {
  name: "MuiFab"
})(Fab);

export {
  Fab_default
};
//# sourceMappingURL=chunk-PJOG4I3N.js.map
