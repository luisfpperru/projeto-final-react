{
  "version": 3,
  "sources": ["../@material-ui/core/esm/ListItemIcon/ListItemIcon.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA,YAAuB;AACvB,wBAAsB;AACtB;AACA;AAEO,IAAI,SAAS,iBAAgB,OAAO;AACzC,SAAO;AAAA,IAEL,MAAM;AAAA,MACJ,UAAU;AAAA,MACV,OAAO,MAAM,QAAQ,OAAO;AAAA,MAC5B,YAAY;AAAA,MACZ,SAAS;AAAA;AAAA,IAIX,qBAAqB;AAAA,MACnB,WAAW;AAAA;AAAA;AAAA;AAQjB,IAAI,eAA4B,AAAM,iBAAW,uBAAsB,OAAO,KAAK;AACjF,MAAI,UAAU,MAAM,SAChB,YAAY,MAAM,WAClB,QAAQ,yBAAyB,OAAO,CAAC,WAAW;AAExD,MAAI,UAAU,AAAM,iBAAW;AAC/B,SAAoB,AAAM,oBAAc,OAAO,SAAS;AAAA,IACtD,WAAW,eAAK,QAAQ,MAAM,WAAW,QAAQ,eAAe,gBAAgB,QAAQ;AAAA,IACxF;AAAA,KACC;AAAA;AAEL,OAAwC,aAAa,YAAY;AAAA,EAU/D,UAAU,0BAAU;AAAA,EAMpB,SAAS,0BAAU;AAAA,EAKnB,WAAW,0BAAU;AAAA,IACnB;AACJ,IAAO,uBAAQ,mBAAW,QAAQ;AAAA,EAChC,MAAM;AAAA,GACL;",
  "names": []
}
