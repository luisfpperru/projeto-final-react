import {
  TableContext_default
} from "./chunk-AQJ7Y2B6.js";
import {
  Tablelvl2Context_default
} from "./chunk-J6ABEWKW.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-4CFPVCA2.js";
import {
  _objectWithoutProperties,
  darken,
  fade,
  init_colorManipulator,
  init_objectWithoutProperties,
  init_withStyles,
  lighten,
  withStyles_default
} from "./chunk-N4AKWCMK.js";
import {
  _extends,
  init_extends,
  require_prop_types
} from "./chunk-3D3B3HZN.js";
import {
  require_react
} from "./chunk-RYO6GA3P.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-TUOADDPD.js";
import {
  __toModule
} from "./chunk-A5ICIBVI.js";

// node_modules/@material-ui/core/esm/TableCell/TableCell.js
init_objectWithoutProperties();
init_extends();
var React = __toModule(require_react());
var import_prop_types = __toModule(require_prop_types());
init_clsx_m();
init_withStyles();
init_capitalize();
init_colorManipulator();
var styles = function styles2(theme) {
  return {
    root: _extends({}, theme.typography.body2, {
      display: "table-cell",
      verticalAlign: "inherit",
      borderBottom: "1px solid\n    ".concat(theme.palette.type === "light" ? lighten(fade(theme.palette.divider, 1), 0.88) : darken(fade(theme.palette.divider, 1), 0.68)),
      textAlign: "left",
      padding: 16
    }),
    head: {
      color: theme.palette.text.primary,
      lineHeight: theme.typography.pxToRem(24),
      fontWeight: theme.typography.fontWeightMedium
    },
    body: {
      color: theme.palette.text.primary
    },
    footer: {
      color: theme.palette.text.secondary,
      lineHeight: theme.typography.pxToRem(21),
      fontSize: theme.typography.pxToRem(12)
    },
    sizeSmall: {
      padding: "6px 24px 6px 16px",
      "&:last-child": {
        paddingRight: 16
      },
      "&$paddingCheckbox": {
        width: 24,
        padding: "0 12px 0 16px",
        "&:last-child": {
          paddingLeft: 12,
          paddingRight: 16
        },
        "& > *": {
          padding: 0
        }
      }
    },
    paddingCheckbox: {
      width: 48,
      padding: "0 0 0 4px",
      "&:last-child": {
        paddingLeft: 0,
        paddingRight: 4
      }
    },
    paddingNone: {
      padding: 0,
      "&:last-child": {
        padding: 0
      }
    },
    alignLeft: {
      textAlign: "left"
    },
    alignCenter: {
      textAlign: "center"
    },
    alignRight: {
      textAlign: "right",
      flexDirection: "row-reverse"
    },
    alignJustify: {
      textAlign: "justify"
    },
    stickyHeader: {
      position: "sticky",
      top: 0,
      left: 0,
      zIndex: 2,
      backgroundColor: theme.palette.background.default
    }
  };
};
var TableCell = React.forwardRef(function TableCell2(props, ref) {
  var _props$align = props.align, align = _props$align === void 0 ? "inherit" : _props$align, classes = props.classes, className = props.className, component = props.component, paddingProp = props.padding, scopeProp = props.scope, sizeProp = props.size, sortDirection = props.sortDirection, variantProp = props.variant, other = _objectWithoutProperties(props, ["align", "classes", "className", "component", "padding", "scope", "size", "sortDirection", "variant"]);
  var table = React.useContext(TableContext_default);
  var tablelvl2 = React.useContext(Tablelvl2Context_default);
  var isHeadCell = tablelvl2 && tablelvl2.variant === "head";
  var role;
  var Component;
  if (component) {
    Component = component;
    role = isHeadCell ? "columnheader" : "cell";
  } else {
    Component = isHeadCell ? "th" : "td";
  }
  var scope = scopeProp;
  if (!scope && isHeadCell) {
    scope = "col";
  }
  var padding = paddingProp || (table && table.padding ? table.padding : "default");
  var size = sizeProp || (table && table.size ? table.size : "medium");
  var variant = variantProp || tablelvl2 && tablelvl2.variant;
  var ariaSort = null;
  if (sortDirection) {
    ariaSort = sortDirection === "asc" ? "ascending" : "descending";
  }
  return React.createElement(Component, _extends({
    ref,
    className: clsx_m_default(classes.root, classes[variant], className, align !== "inherit" && classes["align".concat(capitalize(align))], padding !== "default" && classes["padding".concat(capitalize(padding))], size !== "medium" && classes["size".concat(capitalize(size))], variant === "head" && table && table.stickyHeader && classes.stickyHeader),
    "aria-sort": ariaSort,
    role,
    scope
  }, other));
});
true ? TableCell.propTypes = {
  align: import_prop_types.default.oneOf(["center", "inherit", "justify", "left", "right"]),
  children: import_prop_types.default.node,
  classes: import_prop_types.default.object,
  className: import_prop_types.default.string,
  component: import_prop_types.default.elementType,
  padding: import_prop_types.default.oneOf(["checkbox", "default", "none"]),
  scope: import_prop_types.default.string,
  size: import_prop_types.default.oneOf(["medium", "small"]),
  sortDirection: import_prop_types.default.oneOf(["asc", "desc", false]),
  variant: import_prop_types.default.oneOf(["body", "footer", "head"])
} : void 0;
var TableCell_default = withStyles_default(styles, {
  name: "MuiTableCell"
})(TableCell);

export {
  TableCell_default
};
//# sourceMappingURL=chunk-VOEZ2ZGQ.js.map
